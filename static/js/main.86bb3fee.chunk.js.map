{"version":3,"sources":["components/Homepage_icon.png","components/smart-home-logo.png","components/Room.js","components/AddRoom.js","components/Homepage.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Room","props","useState","showInfo","setShowInfo","showDevices","setShowDevices","className","style","display","onClick","name","id","hidden","disabled","value","AddRoom","validName","setValidName","errMessege","setErrMessege","setFlag","setColor","setRoomPicked","onChange","e","target","selected","length","placeholder","background","color","forhtml","type","to","Homepage","src","Homepage_icon","alt","Header","smart_home_logo","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.86bb3fee.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Homepage_icon.83a69d24.png\";","module.exports = __webpack_public_path__ + \"static/media/smart-home-logo.7365bc17.png\";","import React, { useState } from \"react\";\r\n\r\nexport default function Room(props) {\r\n  // function that adds new devices to the room\r\n  const [showInfo, setShowInfo] = useState(\"inline\");\r\n  const [showDevices, setShowDevices] = useState(\"none\");\r\n\r\n  const roomInfo = () => {\r\n      setShowInfo('none')\r\n      setShowDevices('inline')\r\n\r\n  };\r\n  const addDevices = () => {\r\n    setShowInfo('inline')\r\n    setShowDevices('none')\r\n  };\r\n\r\n  return (\r\n    <div className=\"Room\">\r\n      <div className=\"info\" style={{display:showInfo}}>\r\n        <h3>Room Type:{/* the value displayed here is configured by the user in add room*/}</h3>\r\n        <h3>Room Name:{/* the value displayed here is configured by the user in add room*/}</h3>\r\n        <button onClick={roomInfo}>Add Device</button>\r\n      </div>\r\n      <div className=\"devices\" style={{display:showDevices}}>\r\n        <select name=\"choose-product\" id=\"choose-product\">\r\n          <option hidden disabled value>Choose a Device</option>\r\n          <option value=\"Air-Conditioner\">Air-Conditioner</option>\r\n          <option value=\"Boiler\">Boiler</option>\r\n          <option value=\"Stereo\">Stereo</option>\r\n          <option value=\"Lights\">Lights</option>\r\n        </select>\r\n        <br/>        \r\n        <br/>\r\n        <button onClick={addDevices}>add</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React ,{useState}from 'react'\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\nexport default function AddRoom(props) {\r\n\r\n// onChange function that limits the available inputed keys in #room-name to 5\r\nconst [validName, setValidName]=useState('#4ec3f1')\r\nconst [errMessege, setErrMessege]=useState('none')\r\nconst [flag, setFlag]=useState(false)\r\nconst [color, setColor]=useState('')\r\nconst [roomPicked, setRoomPicked]=useState('')\r\n// const [ButtonDisplay, setButtonDisplay]=useState('none')\r\n\r\n\r\nconst validNameFunction = (e) =>{\r\n    if (e.target.value.length <= 5){\r\n        setValidName('lightgreen')\r\n        setFlag(true)\r\n    } else {\r\n        setValidName('red')\r\n        setErrMessege('inline')\r\n        setFlag(false)\r\n    }\r\n}\r\n\r\nconst colorInput = (e) =>{\r\nsetColor(e.target.value)\r\n}\r\nconst roomInput = (e) =>{\r\n    setRoomPicked(e.target.value)\r\n    }\r\n// function that recieves the added value from #room-color and translate it to an existing color\r\n\r\n// onclick function that recieves the data received from the two inputs above and the selector and validates them-\r\n// the inputs must have at least 1 character and that a room is selected, if not, the user will receieve an alert-\r\n// that will return the user to the homepage, if the user inserted the valid data, the user will return to the-\r\n// homepage and will see the new added rooms\r\n\r\n    return (\r\n        <div className='Addroom'>\r\n            <select name='Choose a room'id=\"rooms\" onChange={roomInput}>\r\n            <option hidden disabled selected value>Choose a room </option>\r\n            <option value=\"bedroom\">Bedroom</option>\r\n            <option value=\"bathroom\">Bathroom</option>\r\n            <option value=\"kitchen\">Kitchen</option>\r\n            </select>\r\n            <br/>\r\n            <br/>\r\n            <input onChange={validNameFunction} id='room-name' placeholder='Room Name' style={{background:validName}}></input>\r\n            <br/>\r\n            <p id='err' style={{display:errMessege, color:'red'}}>Room Name Must contain 5 or less characters</p>\r\n            <br/>\r\n            <label forhtml='room-color'>Select Room Color: </label>\r\n            <br/>\r\n            <input id='room-color' placeholder='Room Color' type='color' onChange={colorInput}></input>\r\n            <br/>\r\n            <br/>\r\n\r\n            <Link id=\"link\" to=\"/\"><button id='create'>Create</button></Link>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState} from \"react\";\r\nimport Homepage_icon from './Homepage_icon.png'\r\nimport AddRoom from \"./AddRoom\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Homepage(props) {\r\n  // need to add a function that by pressing the '+' button it will transfer the user to the 'AddRoom' page\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"Homepage\">\r\n      <div className='homepage-layout'> \r\n      {/* this button will receive the new information inputed by the user in 'addroom' */}\r\n      <Link to=\"/room\"><button style={{display:'none'}}></button></Link>\r\n      </div>\r\n     \r\n      <Link to=\"/addroom\"><button id='plus-button'><img id='plus-button-img' src={Homepage_icon} alt='+'/></button></Link>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport smart_home_logo from \"./smart-home-logo.png\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Header(props) {\r\n  return (\r\n    <div className=\"Header\">\r\n      <Link id=\"link\" to=\"/\">\r\n        <img id=\"logo\" src={smart_home_logo} alt=\"logo\" />\r\n      </Link>\r\n      <Link to=\"/room\">room</Link>\r\n    </div>\r\n  );\r\n}\r\n","import React, {useState} from \"react\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport Room from \"./components/Room\";\nimport AddRoom from \"./components/AddRoom\";\nimport Homepage from \"./components/Homepage\";\nimport Header from \"./components/Header\";\n\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <Router>\n      <Header/>\n        <Switch>\n          <Route exact path = '/' component = {()=>{return <Homepage/>}}/>\n          <Route exact path = '/room' component = {()=>{return <Room/>}}/>\n          <Route exact path = '/addroom' component = {()=>{return <AddRoom/>}}/>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}